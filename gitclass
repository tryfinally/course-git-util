#!/usr/bin/env bash

delay(){
	if [[ $1 = 0 ]]; then
		return
	fi	
	echo -ne $2
	delay_clocks=("\U1F550" "\U1F551" "\U1F552" "\U1F553" "\U1F554" "\U1F555" "\U1F556" "\U1F557" "\U1F558" "\U1F559" "\U1F55A")
	i=0
	for x in `seq 1 $1` ; do
		echo -en "${delay_clocks[$i]}"
		((i++))
	    sleep 1
		echo -en "\033[2D"
		
	done ;
}

# wait between iterations
# delay Time, iteration index, count of all iteratios
waitForLoop(){	
	if (( $2 < $3 )); then		
		delay $1 "\U2002\U2002 ${LightYellow}\U00AB${Cyan}shaving${LightYellow}\U00BB ${LightWhite}\U1F410\U2002\U2002" 
		ClearLine
	fi
}

trim() {
    local var="$*"
    # remove leading whitespace characters
    var="${var#"${var%%[![:space:]]*}"}"
    # remove trailing whitespace characters
    var="${var%"${var##*[![:space:]]}"}"   
	echo "${var}"    
}

function remove_local_changes()
{
	# Revert changes to modified files (modified, added, removed).
	git reset --hard > /dev/null 2>&1
	# Remove all untracked files and directories. (`-f` is `force`, `-d` is `remove directories`)
	git clean -fd > /dev/null 2>&1
}

Bold="\e[1m"
Normal="\e[0m"
Black="\e[30m"
Red="\e[31m"
Green="\e[32m"
Yellow="\e[33m"
Blue="\e[34m"
Magenta="\e[35m"
Cyan="\e[36m"
White="\e[37m"

DarkGray="\e[90m"
LightRed="\e[91m"
LightGreen="\e[92m"
LightYellow="\e[93m"
LightBlue="\e[94m"
LightMagenta="\e[95m"
LightCyan="\e[96m"
LightWhite="\e[97m"


display(){
	echo -en $*
	echo -en ${Normal}
}

SaveCursor(){
	echo -en "\e7"
}

RestoreCursor(){
	echo -en "\e8"
}

ClearScreen(){
	echo -en "\e[2J\e[H"
}

ClearToEndOfScreen(){
	echo -en "\e[0J"
}

ClearLine(){ 
	echo -en "\e[2K" 
}

url=${COURSE_GIT_URL:-'github.com'}
action='pull'
depth=100000
ellapsed=5
repo=${COURSE_GIT_REPO:-'work'}
branch='master'
verbose=0
klass=''

while getopts ":hpc:vk::r:b:dit:" opt; do
  case ${opt} in
  	h ) display "${Bold}Usage:\t ${Normal}$0 ${Normal}[-h] | [-p | -c <depth> [-r <repo>]] [-v] [-i | -t <time>] [user [user]...]\n"
		display "\t $0                       \t ${Red}pull${Normal} all repos\n"
		display "\t $0 user1 user2 ...       \t pull repos for user1 user2...\n"		
		display "${Bold}Options${Normal}\n"
		display "\t -p           \t\t pull, this is the default\n"
		display "\t -c <depth>   \t clone optionaly with depth\n"
		display "\t -r <repo>    \t clone repo named repo\n"
	  # display "\t -i                  Imemdiate, wait between action on repos\n"
	  	display "\t -k <class>   \t\t class/course name. user will be class.user\n"
		display "\t -t n         \t\t Wait n seconds between actions on repos\n"
		display "\t -v 	         \t\t Verbose mode\n"		
		display "\t -h           \t\t help message\n"
		exit 0
		;;
    p ) action="pull"
    	;;
    c ) action="clone"
		if [ $OPTARG != "" ]; then
			depth=$OPTARG
		fi
		;;
	v ) verbose=1
    	;;
	k)  klass_arg=1
		if [ $OPTARG != "" ]; then
			klass=$OPTARG
		fi
		;;
	r)  if [ $OPTARG != "" ]; then
			repo=$OPTARG
		fi
		;;
	b)  if [ $OPTARG != "" ]; then
			branch=$OPTARG
		fi
		;;
	d) action="delete"
		;;
	i) ellapsed=0
		;;
	t ) if [ $OPTARG != "" ]; then
			ellapsed=$OPTARG		
		fi		
		;; 
    \? ) echo "Invalid Option: -$OPTARG" 1>&2
      	exit 1
		;;
  esac
done

ClearScreen
curdir=$PWD

shift $((OPTIND -1))
students=""
while [ "$1" != "" ]; do
	students="$students $1"
	shift
done

students_file=$(<students.lst)
student_array=( ${students_file} )

student_count_delta=0
if [[ "$klass_arg" == "1" ]]; then
	class=klass
elif [[ ${student_array[0]} = class* ]]; then
	# look for first line in students file if its a class alias
	class="${student_array[0]/class:/}"
	class=$(trim $class)
	class_prefix="${class}."		
	student_array[0]=''	
	student_count_delta=-1	
elif [ -e class ]; then
	# or read class name from file
	class=$(<class)
	class=$(trim $class)
	class_prefix="${class}."		
else
	class=`basename "$PWD"`
	class_prefix="${class}."
fi

if [[ ! -z "${students// }" ]]; then	
	student_array=( ${students} )
fi

student_count=${#student_array[@]}
student_count=$((student_count+student_count_delta))

display "${Blue} Retrieving code updates for ${LightCyan}${repo}${Blue} from ${LightCyan}${student_count} ${Blue}students in class ${LightCyan}${class}${Blue}."
display "${LightBlue} [${LightYellow}\U2248 ${LightCyan}$(($student_count * $ellapsed))${Blue} seconds${LightBlue}]\n"

curr=0
skip=0
for d in ${student_array[@]}; do	
	d=$(trim $d)	
	if [ "$d" == "" ];then		
		continue
	fi
	((curr++))
	ticker="${Normal}${Yellow} \U2027\U2027\U2027\U2027\U2027\U2027\U2027\U2027\U2027\U2027\U2027\U2027\U2027\U2027\U2027\U2027\U2027\U2027\U2027\U2027\U2027\U2027${Normal}${Blue}(${LightYellow}$curr${Normal}${Green}/$student_count${Blue}) ${Cyan}${Bold}"
	if [ ${d:0:1} == "#" ] ; then 
		display "${Bold}${Yellow} \UFE57${Normal}${LightYellow}\U00AB${Yellow}skipped${Normal}${LightYellow}\U00BB ${ticker} ${d:1} ${LightYellow}\U2715\n"
		continue;
	fi

	rm -f ${d}.log
	if [ $action == "delete" ]; then
		rm -Rf ${d}
		continue;
	fi
	if [ $action == 'clone' ] || [ ! -d "$d" ] || [ ! "$(ls -A $d)" ]; then
		display "${LightRed} âœ‡ ${LightYellow}\U00AB${Cyan}cloning${LightYellow}\U00BB ${ticker} $d "
		SaveCursor
			git clone --depth=$depth git@$url:${class_prefix}$d/$repo.git $d > /dev/null 2> ${d}.log
			gitstatus=$?
		RestoreCursor
		if [ $gitstatus -eq 0 ]; then		
			display " ${LightGreen}  âœ“ \n"  
			rm ${d}.log
		else			
			display " ${Bold}${LightRed} ðŸ”¥ ${LightCyan}${repo}${LightRed}?\n"
			echo -e "\ngit clone --depth=${depth} git@${url}:${class_prefix}${d}/${repo}.git ${d}" >> ${d}.log
		fi
	else
		cd $d
		display "${LightGreen} âœ‡ ${LightYellow}\U00AB${Cyan}pulling${LightYellow}\U00BB ${ticker} $d "				
		SaveCursor		
			display "\n"							
			git stash > /dev/null 2>&1
			git $action	> /dev/null 2>${d}.log
			gitstatus=$?		
		RestoreCursor
		if [ $gitstatus -eq 0 ]; then		
			display " ${LightGreen}  âœ“ \n"  
			rm ${d}.log
		else			
			display " ${Bold}${LightRed} ðŸ”¥${Normal}${LightYellow} pulling ${LightCyan}${repo}\n"
		fi
		
		SaveCursor		
		if (( $verbose == 1 )); then
			line=$((curr+3))
			display "\033[${line};28r"
			RestoreCursor
			SaveCursor
			git --no-pager log --graph --pretty='%Cred%h%Creset -%C(auto)%d%n %C(bold cyan) %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --stat -2
			waitForLoop $ellapsed $curr $((student_count+1))		
			display "\033[;r"
		fi
		if (( $verbose != 1 )); then
			waitForLoop $ellapsed $curr $student_count		
		fi		
		RestoreCursor
		ClearToEndOfScreen
		
		cd $curdir
	fi
done
